name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Concurrency controls to prevent multiple builds on the same branch/PR
# This saves costs by canceling outdated builds when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize compilation performance
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quick formatting and linting checks
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      



      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "check"
          # Enhanced cache key with Cargo.lock hash for better invalidation
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
          # Cache cargo tools to avoid repeated installations
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check cargo check
        run: cargo check --all-targets --all-features

  # Main test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        include:
          # Test nightly only on Ubuntu to reduce costs
          - os: ubuntu-latest
            rust: nightly
          # Test on additional platforms for better compatibility
          # TODO: Re-enable Windows testing after compatibility fixes
          # - os: windows-latest
          #   rust: stable
          - os: macos-latest
            rust: stable
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      # Install faster linker on Linux for improved build performance
      - name: Install lld linker (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y lld
      
      # Set platform-specific environment variables for optimization
      - name: Set Linux-specific environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=lld" >> "$GITHUB_ENV"
          echo "CARGO_BUILD_JOBS=4" >> "$GITHUB_ENV"
      
      # TODO: Re-enable Windows-specific environment after compatibility fixes
      # - name: Set Windows-specific environment
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo "CARGO_BUILD_JOBS=4" >> "$env:GITHUB_ENV"
      #     # Use faster linker on Windows if available
      #     echo "RUSTFLAGS=-C link-arg=/INCREMENTAL:NO" >> "$env:GITHUB_ENV"
      
      - name: Set macOS-specific environment
        if: matrix.os == 'macos-latest'
        run: |
          echo "CARGO_BUILD_JOBS=4" >> "$GITHUB_ENV"

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "test-${{ matrix.os }}-${{ matrix.rust }}"
          # Enhanced cache key with Cargo.lock hash for better invalidation
          key: ${{ runner.os }}-cargo-test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          # Cache cargo tools to avoid repeated installations
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Run unit tests
        run: cargo test --lib --bins --jobs 4
        env:
          RUST_LOG: debug
          # Enable parallel test execution
          RUST_TEST_THREADS: 4

      - name: Run integration tests
        run: cargo test --test '*' --jobs 4
        env:
          RUST_LOG: debug
          # Enable parallel test execution
          RUST_TEST_THREADS: 4

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache for audit
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "audit"
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Install cargo-audit
        run: |
          # Check if cargo-audit is already cached
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Run security audit
        run: cargo audit

  # Build release binaries
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        # TODO: Re-enable Windows builds after compatibility fixes
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "build-${{ matrix.os }}"
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Build release binary
        run: cargo build --release --bin runcept

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: runcept-${{ matrix.os }}
          path: |
            target/release/runcept

  # Coverage report (only on main branch to save costs)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "coverage"
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Install cargo-llvm-cov
        run: |
          # Check if cargo-llvm-cov is already cached
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov
          fi

      - name: Run coverage
        run: cargo llvm-cov --html --all-targets --workspace
        env:
          RUST_LOG: debug

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/llvm-cov/html/

  # Documentation check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "docs"
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --workspace
        env:
          RUSTDOCFLAGS: -D warnings